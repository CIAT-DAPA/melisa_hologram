// ESP32 WAV Player from SD Card (ILI9341 module) to MAX98357 I2S amplifier
// Connections:
// SD Card (on ILI9341):
//   CS   -> GPIO5
//   MOSI -> GPIO23
//   MISO -> GPIO19
//   SCK  -> GPIO18
// I2S (MAX98357):
//   BCLK  -> GPIO13
//   LRC   -> GPIO4
//   DIN   -> GPIO21
//   VIN   -> 3V3
//   GND   -> GND

#include <SPI.h>
#include <SD.h>
#include <driver/i2s.h>

// Pin definitions
#define SD_CS 5
#define I2S_BCK 13  // Bit Clock
#define I2S_LRC 4   // Word Select (LRCK)
#define I2S_DIN 21  // Data Input (SD)

// I2S configuration
#define I2S_NUM I2S_NUM_0
#define I2S_SAMPLE_BITS 16
#define BUFFER_SIZE 1024

void setup() {
  Serial.begin(115200);
  delay(100);
  Serial.println("Initializing SD card...");

  if (!SD.begin(SD_CS)) {
    Serial.println("ERROR: SD Card Mount Failed");
    while (true)
      ;
  }
  Serial.println("SD Card mounted.");

  // Install and configure I2S driver
  i2s_config_t i2s_config = {
    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_TX),
    .sample_rate = 44100,  // will update after reading WAV header
    .bits_per_sample = (i2s_bits_per_sample_t)I2S_SAMPLE_BITS,
    .channel_format = I2S_CHANNEL_FMT_RIGHT_LEFT,
    .communication_format = (i2s_comm_format_t)(I2S_COMM_FORMAT_I2S | I2S_COMM_FORMAT_I2S_MSB),
    .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
    .dma_buf_count = 4,
    .dma_buf_len = 1024,
    .use_apll = false
  };

  i2s_pin_config_t pin_config = {
    .bck_io_num = I2S_BCK,
    .ws_io_num = I2S_LRC,
    .data_out_num = I2S_DIN,
    .data_in_num = I2S_PIN_NO_CHANGE
  };

  i2s_driver_install(I2S_NUM, &i2s_config, 0, NULL);
  i2s_set_pin(I2S_NUM, &pin_config);
  Serial.println("I2S driver installed.");
}

void loop() {
  File wav = SD.open("/audio/song.wav");
  if (!wav) {
    Serial.println("ERROR: Cannot open WAV file");
    while (true)
      ;
  }

  // Read WAV header for sample rate
  wav.seek(24);
  uint32_t sampleRate;
  wav.read((uint8_t*)&sampleRate, 4);
  Serial.print("Sample Rate: ");
  Serial.println(sampleRate);

  // Reconfigure I2S with actual sample rate
  i2s_set_sample_rates(I2S_NUM, sampleRate);

  // Skip header (44 bytes)
  wav.seek(44);

  uint8_t buffer[BUFFER_SIZE];
  size_t bytesRead;
  size_t bytesWritten;

  Serial.println("Starting playback...");
  while ((bytesRead = wav.read(buffer, BUFFER_SIZE)) > 0) {
    i2s_write(I2S_NUM, buffer, bytesRead, &bytesWritten, portMAX_DELAY);
  }

  Serial.println("Playback finished.");
  wav.close();

  // Halt after playing once
  while (true) {
    delay(1000);
  }
}
